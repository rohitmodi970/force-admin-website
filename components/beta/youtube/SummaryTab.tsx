// components/VideoInsight/SummaryTab.tsx
import React, { useMemo } from 'react';
import { BookOpen, Copy } from 'lucide-react';

interface SummaryTabProps {
  summary: string;
  summaryLoading: boolean;
  summaryError: string;
  transcript: string;
  onGenerateSummary: () => void;
  onCopyToClipboard: () => void;
}

// Component to render formatted summary text
const FormattedSummaryText: React.FC<{ content: string }> = ({ content }) => {
  const formattedContent = useMemo(() => {
    if (!content) return '';
    
    // Convert markdown-like formatting to HTML
    let formatted = content
      // Handle bold text **text** -> <strong>text</strong>
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      // Handle section headers (lines ending with **)
      .replace(/^(\*\*.*?\*\*)\s*$/gm, '<h4 class="section-header">$1</h4>')
      // Handle bullet points at start of lines (both • and *)
      .replace(/^[•*]\s+/gm, '<span class="bullet">•</span> ')
      // Convert line breaks to proper HTML
      .replace(/\n/g, '<br>')
      // Handle important notes
      .replace(/Note:/g, '<span class="note-label">Note:</span>');
    
    return formatted;
  }, [content]);

  return (
    <div 
      className="formatted-summary"
      dangerouslySetInnerHTML={{ __html: formattedContent }}
    />
  );
};

export const SummaryTab: React.FC<SummaryTabProps> = ({
  summary,
  summaryLoading,
  summaryError,
  transcript,
  onGenerateSummary,
  onCopyToClipboard
}) => {
  const hasSummary = Boolean(summary?.trim());
  const hasTranscript = Boolean(transcript?.trim());

  return (
    <div className="h-full flex flex-col">
      {/* Header Section */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center">
          <BookOpen className="w-5 h-5 mr-2 text-blue-600" />
          <h2 className="text-xl font-semibold text-gray-800">AI-Generated Summary</h2>
        </div>
        
        {hasSummary && (
          <div className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-full">
            Generated by Gemini AI
          </div>
        )}
      </div>

      {/* Error State */}
      {summaryError && (
        <div className="mb-6 p-4 bg-red-50 border-l-4 border-red-400 rounded-r-lg">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="font-medium text-red-800">Error generating summary</p>
              <p className="mt-1 text-red-700 text-sm">{summaryError}</p>
            </div>
          </div>
        </div>
      )}

      {/* Summary Content */}
      <div className="flex-1 flex flex-col">
        {summaryLoading ? (
          <div className="flex-1 flex justify-center items-center bg-gradient-to-br from-blue-50 to-indigo-50 border border-blue-100 rounded-xl">
            <div className="text-center p-8">
              <div className="flex justify-center mb-6">
                <div className="relative">
                  <div className="animate-spin rounded-full h-12 w-12 border-4 border-blue-100"></div>
                  <div className="animate-spin rounded-full h-12 w-12 border-4 border-blue-600 border-t-transparent absolute top-0 left-0"></div>
                </div>
              </div>
              <h3 className="text-lg font-medium text-gray-800 mb-2">Generating AI Summary</h3>
              <p className="text-gray-600 text-sm mb-1">Analyzing transcript content...</p>
              <p className="text-gray-400 text-xs">This may take a few moments</p>
            </div>
          </div>
        ) : hasSummary ? (
          <div className="flex-1 bg-white border border-gray-200 rounded-xl shadow-sm overflow-hidden">
            {/* Content Area */}
            <div className="flex-1 h-full overflow-hidden">
              <div className="h-full overflow-y-auto p-6 text-sm text-gray-700 leading-relaxed bg-gray-50">
                <style jsx>{`
                  .formatted-summary {
                    line-height: 1.7;
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                  }
                  
                  .formatted-summary strong {
                    font-weight: 600;
                    color: #1f2937;
                    background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
                    padding: 1px 4px;
                    border-radius: 3px;
                    font-size: 0.95em;
                  }
                  
                  .formatted-summary .bullet {
                    color: #3b82f6;
                    font-weight: 600;
                    margin-right: 8px;
                  }
                  
                  .formatted-summary .section-header {
                    font-size: 1.1em;
                    font-weight: 700;
                    color: #1f2937;
                    margin: 20px 0 12px 0;
                    padding: 8px 12px;
                    background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);
                    border-left: 4px solid #3b82f6;
                    border-radius: 0 6px 6px 0;
                  }
                  
                  .formatted-summary .section-header:first-child {
                    margin-top: 0;
                  }
                  
                  .formatted-summary .note-label {
                    font-weight: 600;
                    color: #b45309;
                    text-transform: uppercase;
                    font-size: 0.85em;
                    letter-spacing: 0.05em;
                  }
                  
                  .formatted-summary br + .bullet {
                    margin-top: 8px;
                    display: inline-block;
                  }
                `}</style>
                
                <FormattedSummaryText content={summary} />
              </div>
            </div>
            
            {/* Footer with Actions */}
            <div className="border-t border-gray-100 bg-white px-6 py-4">
              <div className="flex items-center justify-between">
                <div className="text-xs text-gray-500">
                  AI-generated summary • {summary.length} characters
                </div>
                
                <div className="flex items-center space-x-3">
                  <button
                    onClick={onCopyToClipboard}
                    className="inline-flex items-center px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all duration-200"
                  >
                    <Copy className="w-4 h-4 mr-2" />
                    Copy to Clipboard
                  </button>
                  
                  <button
                    onClick={onGenerateSummary}
                    disabled={summaryLoading || !hasTranscript}
                    className="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all duration-200"
                  >
                    <BookOpen className="w-4 h-4 mr-2" />
                    Regenerate Summary
                  </button>
                </div>
              </div>
            </div>
          </div>
        ) : (
          /* Empty State */
          <div className="flex-1 flex items-center justify-center bg-gradient-to-br from-gray-50 to-blue-50 border-2 border-dashed border-gray-200 rounded-xl">
            <div className="text-center p-8 max-w-md">
              <div className="inline-flex items-center justify-center w-16 h-16 bg-blue-100 rounded-full mb-6">
                <BookOpen className="h-8 w-8 text-blue-600" />
              </div>
              <h3 className="text-lg font-medium text-gray-800 mb-3">Ready to Generate Summary</h3>
              <p className="text-gray-600 text-sm leading-relaxed mb-6">
                Get an AI-powered summary of your transcript that highlights the main points and key insights.
              </p>
              <button
                onClick={onGenerateSummary}
                disabled={!hasTranscript}
                className="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all duration-200 text-sm font-medium shadow-sm hover:shadow-md"
              >
                <BookOpen className="w-4 h-4 mr-2" />
                Generate Summary
              </button>
              {!hasTranscript && (
                <p className="text-xs text-gray-400 mt-3">
                  A transcript is required to generate a summary
                </p>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};